#2011 암호코드
#memory: O(log n)
def under_100(n):
  if n<100:
    if n==0: return 0
    elif n==20: return 1
    elif n<11: return 1
    elif n<27: return 2
    elif n<100 and n%10!=0: return 1
    else: return 0
  if n>99:
    print("wrong use")
    return 0

I=input()
n=int(I)
N=len(I)
D=[0 for i in range(N)]
if int(I[0])==0:
  print(0) #except 01, 001, ~~
elif N<3:
  print(under_100(n))
else:
  D[0]=under_100(int(I[0]))
  D[1]=under_100(int(I[0:2]))
  for i in range(2,N):
    x=int(I[i-1:i+1]) #끝 두자리
    if x%10!=0:
      D[i]+=D[i-1]
    if I[i-1]!=0 and (x==20 or x==10 or under_100(x)==2):
      D[i]+=D[i-2]
  print(D[N-1]%1000000)


"""
#Too much memory (O(n))
n=int(input())
D=[0 for i in range(max(30,n+1))]
#D[i]: i를 암호로 할 때의 가짓수
#30: genenral number larger than 26
D[0]=0
for i in range(1,11):
  D[i]=1
for i in range(11,20):
  D[i]=2
D[20]=1
for i in range(21,27):
  D[i]=2
if 26<n<100 and n%10!=0: D[i]=1
if n>99:
  for i in range(27,n+1):
    if i%10!=0:
      D[i]+=D[i//10]
      '''
      if i==n:
        print(D[n])
        print(D[i//10])
      '''
    if 9<i%100<27:
      D[i]+=D[i//100]
      '''
      if i==n:
        print(D[n])
        print(D[i//100])
      '''
print(D[n]%1000000)
"""
    