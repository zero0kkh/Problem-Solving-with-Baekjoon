#2146 다리 만들기
#cf. 7576 Tomato
#BFS
#Fast I/O
#Learned
#DFS는 pop 후에 중복체크해도 되지만 bfs는 넣기 전에 중복체크를 해주어야 함.
import sys, math
from collections import deque
def print(string=""):
  sys.stdout.write(string+"\n")
def print(inte=0):
  sys.stdout.write(str(inte)+"\n")
def input():
  return sys.stdin.readline().rstrip()
sys.setrecursionlimit(111111111)

n=int(input())
MAP=[]
for _ in range(n):
  MAP.append(list(map(int,input().split())))

#Labelling the islands=>'LMAP' list cf. #2667
def DFS(i,j):
  global num,n
  if LMAP[i][j]==0 and MAP[i][j]==1:
    LMAP[i][j]=num
    if i!=0 and MAP[i-1][j]==1:
      DFS(i-1,j)
    if j!=0 and MAP[i][j-1]==1:
      DFS(i,j-1)
    if i!=n-1 and MAP[i+1][j]==1:
      DFS(i+1,j)
    if j!=n-1 and MAP[i][j+1]==1:
      DFS(i,j+1)

LMAP=[[0 for _ in range(n)] for __ in range(n)]
num=1
for i in range(n):
  for j in range(n):
    if MAP[i][j]==1 and LMAP[i][j]==0:
      DFS(i,j)
      num+=1

#BFS
visit=deque()
for i in range(n):
  for j in range(n):
    if MAP[i][j]==1:visit.append((i,j,0,LMAP[i][j]))

def show():
  global n
  curr=[]
  print("CURRENT VISIT")
  for e in visit:
    curr.append((e[0],e[1]))
  for i in range(n):
    row=""
    for j in range(n):
      if (i,j) in curr: row+="*"
      else: row+="0"
      row+=" "
    print(row)

levelLimit=n+1
key=2*n
'''
5

1 0 0 0 1

0 0 0 0 0

0 0 0 0 0

0 0 0 0 0

1 1 0 0 1

그냥 BFS코드에서는 위의 예시에서 오답. levelLimit를 두어 같은 level의 경우는 모두 해본 뒤에 최소를 구하도록 해야함.
'''
while visit:
  #show()
  i,j,level,label=visit.popleft()
  if level>levelLimit: break
  if i!=0 and MAP[i-1][j]<1:
    if MAP[i-1][j]==-1:
      if LMAP[i-1][j][0]!=label:
        if key>level+LMAP[i-1][j][1]: 
          key=level+LMAP[i-1][j][1]
          levelLimit=level
    else:
      MAP[i-1][j]=-1
      LMAP[i-1][j]=(label,level+1)
      visit.append((i-1,j,level+1,label))
  if j!=0 and MAP[i][j-1]<1:
    if MAP[i][j-1]==-1:
      if LMAP[i][j-1][0]!=label:
        if key>level+LMAP[i][j-1][1]: 
          key=level+LMAP[i][j-1][1]
          levelLimit=level
    else:
      MAP[i][j-1]=-1
      LMAP[i][j-1]=(label,level+1)
      visit.append((i,j-1,level+1,label))
  if i!=n-1 and MAP[i+1][j]<1:
    if MAP[i+1][j]==-1:
      if LMAP[i+1][j][0]!=label:
        if key>level+LMAP[i+1][j][1]: 
          key=level+LMAP[i+1][j][1]
          levelLimit=level
    else:
      MAP[i+1][j]=-1
      LMAP[i+1][j]=(label,level+1)
      visit.append((i+1,j,level+1,label))
  if j!=n-1 and MAP[i][j+1]<1:
    if MAP[i][j+1]==-1:
      if LMAP[i][j+1][0]!=label:
        if key>level+LMAP[i][j+1][1]: 
          key=level+LMAP[i][j+1][1]
          levelLimit=level
    else:
      MAP[i][j+1]=-1
      LMAP[i][j+1]=(label,level+1)
      visit.append((i,j+1,level+1,label))
print(key)

