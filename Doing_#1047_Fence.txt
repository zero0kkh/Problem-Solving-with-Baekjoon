#1047 울타리
#cf
#Fast I/O
#Learned
import sys, math
from itertools import combinations
def print(string=""):
  sys.stdout.write(string+"\n")
def print(inte=0):
  sys.stdout.write(str(inte)+"\n")
def input():
  return sys.stdin.readline().rstrip()
sys.setrecursionlimit(111111111)

n=int(input())

D=[[],[],[]]
for i in range(1,n+1):
  x,y,v=map(int,input().split())
  D[0].append(x)
  D[1].append(y)
  D[2].append(v)

def Brute(wood):
  global n
  keys=[]
  for i in range(n):
    if D[0][i]!=-1:
      keys.append(i)
  cnt=1
  while True:
    COMB=list(combinations(keys,cnt))
    for trees in COMB: #이번 iteration에서 잘릴 나무의 index들
      Xs=[]
      Ys=[]
      newwood=wood
      for i in range(cnt):
        newwood+=D[2][trees[i]]
      for i in keys:
        if not (i in trees):
          Xs.append(D[0][i])
          Ys.append(D[1][i])
      Xs.sort()
      Ys.sort()
      need=2*(Xs[-1]-Xs[0]+Ys[-1]-Ys[0]) #안 잘린 나무들을 둘러싸는 둘레
      if need<=newwood:
        return cnt
    cnt+=1

wood=0 #현재 만들 수 있는 울타리의 길이
cnt=0 #자른 나무의 개수
benefit=[0]*n #benefit[i]: i+1번째의 나무를 자를 때 얻을 수 있는 이득(필요한 둘레의 감소양(need의 감소량)+만들 수 있는 울타리 길이의 증가량(wood의 증가량))
#Greedy with benefit
while True:
  keys=[]
  Xs=[]
  Ys=[]
  for i in range(n):
    if D[0][i]!=-1:
      keys.append(i)
  for i in keys:
    Xs.append(D[0][i])
    Ys.append(D[1][i])
  Xs.sort()
  Ys.sort()
  need=2*(Xs[-1]-Xs[0]+Ys[-1]-Ys[0]) #필요한 울타리 둘레
  if need<=wood: break
  
  for i in keys:
    c=D[2][i]
    if D[0][i]==Xs[0]:
      c+=2*(Xs[1]-Xs[0])
    if D[0][i]==Xs[-1]:
      c+=2*(Xs[-1]-Xs[-2])
    if D[1][i]==Ys[-1]:
      c+=2*(Ys[-1]-Ys[-2])
    if D[1][i]==Ys[0]:
      c+=2*(Ys[1]-Ys[0])
    benefit[i]=c
  #print(benefit)
  ind=benefit.index(max(benefit))
  if benefit.count(max(benefit))>1:
    cnt+=Brute(wood)
    break
  else:
    wood+=D[2][ind]
    cnt+=1
    benefit[ind]=0
    D[0][ind]=-1
    #D[1][ind]=-1
    #D[2][ind]=-1
print(cnt)

'''
같은 benefit을 가지는 것들이 존재할 때 그냥 앞에 있는 것을 가져올 때:
1 1 3 : 7
10 10 2 : 6
2 9 4 : 8
3 4 4 : 6
4 2 4 : 8
need: 2*(4+5)=18
wood: 17
--------------------
하지만 아래처럼 해야 최소가 됨.
1 1 3 : 7
4 2 4 : 6
5 3 4 : 6
3 4 4 : 6
2 9 4 : 6+6
need: 2*(4+5)=18
wood: 19

2번재에 4 2 4를 골라야하는 이유:

1. min/max로 인한 benefit은 추후 뒤의 선택들에 따라서 커질 잠재력이 있으므로 먼저 일단 V가 큰 것을 우선적으로.

=>
TC#2
10
3 4 4
10 7 2
6 6 2
2 9 4
8 8 4
7 10 5
5 3 4
4 2 4
9 5 2
1 1 3
      need wood
[6] 7 10 5=> 34 5
[10] 1 1 3=>30 8
[4] 2 9 4=>26 12
(3,4,4)(8,8,4)(4,2,4)모두 benefit 6
이때 
[1] 3 4 4=>24 16
[8] 4 2 4=>20 20
으로 성공.
=>[5] 8 8 4 제외를 어떻게 시킬 것인가?
=>benefit이 같을 땐 그냥 모든 경우를 다해봐야됨.
=>같은 최고 benefit이 나올 때까진 이전 방법 고수=>그 다음 nCk하는 함수 불러옴.

Wow.... brute로만 하면 memory 초과. greedy로 하다가 brute 하면 틀렸음 나옴,,,
일단 greedy 방법이 잘못되었나봄...

1) Brute를 하되 일단 [[],[],[]] 이중배열 하나로 해서 메모리 초과를 해결해보기=>Fail

2) 그냥 benefit이 같은 경우가 나타나면 브루트포스로 바꾸는 코드도 틀렸음,,, 그리디 benefit을 잘못 잡았거나 특정 상황을 놓치고 있는 듯

c++로 메모리 문제 도전..?

'''
